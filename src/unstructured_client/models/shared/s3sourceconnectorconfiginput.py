"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict
from unstructured_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)


class S3SourceConnectorConfigInputTypedDict(TypedDict):
    remote_url: str
    anonymous: NotRequired[bool]
    endpoint_url: NotRequired[Nullable[str]]
    key: NotRequired[Nullable[str]]
    recursive: NotRequired[bool]
    secret: NotRequired[Nullable[str]]
    token: NotRequired[Nullable[str]]


class S3SourceConnectorConfigInput(BaseModel):
    remote_url: str

    anonymous: Optional[bool] = False

    endpoint_url: OptionalNullable[str] = UNSET

    key: OptionalNullable[str] = UNSET

    recursive: Optional[bool] = True

    secret: OptionalNullable[str] = UNSET

    token: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "anonymous",
            "endpoint_url",
            "key",
            "recursive",
            "secret",
            "token",
        ]
        nullable_fields = ["endpoint_url", "key", "secret", "token"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
